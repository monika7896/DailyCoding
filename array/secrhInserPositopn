class Solution:
    def searchInsert(self, nums: list[int], target: int) -> int:
        l = 0
        r = len(nums) - 1  # Corrected the right boundary

        while l <= r:
            mid = (l + r) // 2
            
            if target == nums[mid]:
                return mid
            elif target < nums[mid]:
                r = mid - 1  # Adjusted right boundary
            else:
                l = mid + 1  # Adjusted left boundary
        
        return l  # Returning l, which is the correct position to insert target


        
        
nums = [1,3,5,6]
target = 2
# Output: 2

obj= Solution()
c= obj.searchInsert(nums,target)
print("v",c)
